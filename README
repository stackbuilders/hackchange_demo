h1. Rails App

* rails new hackchange_demo
* cd hackchange_demo
* rails s

* open browser and look at http://localhost:3000

* delete file in public/index.html
* comment out root :to => "welcome#index" in routes.rb
* rails g controller welcome
** Will generate tests, ignore those for now

* create app/views/welcome/index.html.erb
* Enter a message (html)

* Inserting <%= Time.now %> in ERB
* Refresh in browser, see it change!
* View page source
* Look at Rails server, explain

* Simple CSS/Rails styling

h2. Feature: Creating a video
* Generate the controller rails g controller videos
** Question: What is a controller? (request/response cycle)
** Question: How do we tell the application that the controller exists?

* Creating the resource - add a route: resources :videos
** Explain adding a route - tells the app to route requests to that controller and creates helper functions

* Add link to create a video
** Open browser, refresh, click link
** Explain 'action not found' error message
** Look at Rails server, explain

** Add new method in controller - explain error about view not found
** Explain template not found error message

h2. Modeling videos

* How do we store information (a video)?

** What information do we want to store about a video?
*** Title
*** Submitter name
*** Embed code

** What is a database?
** What is a model?

* rails g model video title:string embed:text submitter:string
* Go to migration

h2. Create form

* Create file app/views/videos/new.html.erb
* Write the form

* Add link to home
* Explain 'root' route
* Enter text and submit

* Explain action not found, tie to previous time we saw action not found

* Look at params in Rails server
* Explain or mention HTTP POST

h2. Add create method

* Video.create(params[:video])
* Submit form
* Go to Rails console
* Video.all
* Redirect to root_path

* Submit again, look at Rails server, see what redirect does

h2. Wiring up index

* Welcome controller, add index method
* @videos = Video.all
* Explain variables
* Explain collection
* Add index method, iterator
